function [AAF,LPF,F_ECG,Delay,index_delay,Baseline_EST] = Deci_to_interp(signal,T_signal,Fs_AAF,Fstop_AAF,Fpass_AAF,Fs_LPF,Fstop_LPF,Fpass_LPF)

%%
%AAF250 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.6 and Signal Processing Toolbox 8.2.
% Generated on: 11-May-2022 14:41:55

% FIR Window Lowpass filter designed using the FIR1 function.

% All frequency values are in Hz.
Fs = Fs_AAF;  % Sampling Frequency

% Fpass = 20;              % Passband Frequency
% Fstop = 25;              % Stopband Frequency
Fpass = Fpass_AAF;              % Passband Frequency
Fstop = Fstop_AAF;
Dpass = 0.057501127785;  % Passband Ripple
Dstop = 0.1;             % Stopband Attenuation
flag  = 'scale';         % Sampling Flag

% Calculate the order from the parameters using KAISERORD.
[N,Wn,BETA,TYPE] = kaiserord([Fpass Fstop]/(Fs/2), [1 0], [Dstop Dpass]);

% Calculate the coefficients using the FIR1 function.
b  = fir1(N, Wn, TYPE, kaiser(N+1, BETA), flag);
AAF = dfilt.dffir(b);

% [EOF]
%%
%LPF50 Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.6 and Signal Processing Toolbox 8.2.
% Generated on: 11-May-2022 14:39:39

% FIR Window Lowpass filter designed using the FIR1 function.

% All frequency values are in Hz.
% Fs = 50;  % Sampling Frequency
Fs = Fs_LPF;

% Fpass = 0.5;             % Passband Frequency
% Fstop = 0.67;            % Stopband Frequency
Fpass = Fpass_LPF ;             % Passband Frequency
Fstop = Fstop_LPF;            % Stopband Frequency

Dpass = 0.057501127785;  % Passband Ripple
Dstop = 0.1;             % Stopband Attenuation
flag  = 'scale';         % Sampling Flag

% Calculate the order from the parameters using KAISERORD.
[N,Wn,BETA,TYPE] = kaiserord([Fpass Fstop]/(Fs/2), [1 0], [Dstop Dpass]);

% Calculate the coefficients using the FIR1 function.
b  = fir1(N, Wn, TYPE, kaiser(N+1, BETA), flag);
LPF = dfilt.dffir(b);
%%
ECG_low = filter(AAF,signal); %% anti aliasing
ECG_Deci = ECG_low(1:5:end); % Decimation of ECG signal by factor 5

N=1:5:length(signal);
Filt_BL_Deci = filter(LPF,ECG_Deci); % through the Filter
n = 1:length(signal);
 
BL_intp = zeros(1,numel(N)*5-4);
BL_intp(1:5:end) = Filt_BL_Deci;
Baseline_EST = 5*filter(AAF,BL_intp);
Delay = (2*numel(AAF.Numerator)-1)/2*T_signal+(numel(LPF.Numerator)-1)/2*(1/50);
index_delay = round(Delay/T_signal);
F_ECG = signal(1:(end-index_delay+1)) - Baseline_EST(index_delay:end)';